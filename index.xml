<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>icecat471&#39;s Devlog</title>
    <link>https://icecat471.github.io/devlog/</link>
    <description>Recent content on icecat471&#39;s Devlog</description>
    <image>
      <url>https://icecat471.github.io/devlog/papermod-cover.png</url>
      <link>https://icecat471.github.io/devlog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 28 Apr 2021 17:19:07 +0900</lastBuildDate><atom:link href="https://icecat471.github.io/devlog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Docker] 몽고db 컨테이너 설치</title>
      <link>https://icecat471.github.io/devlog/post/docker/install_mongo_db/</link>
      <pubDate>Wed, 28 Apr 2021 17:19:07 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/docker/install_mongo_db/</guid>
      <description>docker로 mongoDB 설치 pull # 최신버전 받아오기 $ docker pull mongo run $ docker run -d \ # background 실행 --name mongo_db \ # container name -v /Users/docker/mongodb/data/db:/data/db \ # volume 설정 -p 27017:27017 \ # port 설정 mongo -auth 컨테이너 접속 $ docker exec -it mongo_db /bin/bash mongo db # mongo db 접속. 권한이 없는 상태라 바로 접속 됨. $ mongo # admin db 선택 &amp;gt; use admin # admin 계정 생성 &amp;gt; db.</description>
    </item>
    
    <item>
      <title>[프로젝트1] 웹 캐치마인드 만들기 1</title>
      <link>https://icecat471.github.io/devlog/post/project/project1_01/</link>
      <pubDate>Thu, 22 Apr 2021 23:36:47 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/project/project1_01/</guid>
      <description>대략적인 구성 잡아보기
front vue.js + axios(api 서버 연동)
(HTML 기본 canvas를 이용할지 유니티 WebGL을 이용할지 고민중..)
back typescript(nest.js) - API server
golang(gorilla/websocket) - Web Socket Server
mongoDB
redis - session 관리 CI/CD Terraform(AWS) - IaC
Jenkins
Kubernetes + Docekr</description>
    </item>
    
    <item>
      <title>ECDSA 알고리즘</title>
      <link>https://icecat471.github.io/devlog/post/encryption/ecdsa/</link>
      <pubDate>Thu, 22 Apr 2021 16:04:05 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/encryption/ecdsa/</guid>
      <description>ECDSA (Elliptic Curve Digital Signature Algorithm) 타원곡선암호(ECC)를 전자서명에 접목시킨 암호 알고리즘.타원곡선의 정의 일반적으로 타원 곡선 방정식은 아래와 같다.
 y2+ b1xy + b2y = x3+ a1x2+ a2x + a3 그러나, 실수상의 타원 곡선은 아래와 같은 특별한 타원 곡선을 사용한다.
 y2= x3+ ax + b
 타원곡선의 특징은 x축을 중심으로 대칭되며, 비 수직선에 대해 최대 3개 지점에서 곡선과 교차.
타원곡선상의 연산 타원곡선상의 점 P와 Q의 덧셈연산은 P와 Q를 지나는 직선이 타원과 만나는 교점(-R)을 x축으로 대칭시킨 점 R에 대해</description>
    </item>
    
    <item>
      <title>[디자인패턴] Decorator 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/decorator/</link>
      <pubDate>Wed, 21 Apr 2021 22:18:34 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/decorator/</guid>
      <description>Decorator Pattern 출처: https://golangbyexample.com/decorator-pattern-golang/
개요 개체를 변경하지 않고 기능을 추가할 수 있음.
=&amp;gt; 이미 테스트가 끝난 코드를 수정하면 안됨 (Open-Closed Principle에 위배됨) 두가지 피자가 존재한다고 가정해보자.
 vegge mania pizza peppy tofu pizza  UML 다이어그램 코드 pizza.go
package main type pizza interface { getPrice() int } peppyPaneer.go
package main type peppyPaneer struct { } func (p *peppyPaneer) getPrice() int { return 20 } veggeMania.go
package main type veggeMania struct { } func (p *veggeMania) getPrice() int { return 15 } 토핑을 추가하기 위해 위쪽에 만들어진 구조체들은 더 이상 수정하면 안됨.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Composite 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/composite/</link>
      <pubDate>Tue, 20 Apr 2021 23:28:31 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/composite/</guid>
      <description>Composite Pattern 출처: https://golangbyexample.com/composite-design-pattern-golang/
개요 &amp;lsquo;composite&amp;rsquo;라고 불리는 개체그룹이 단일개체와 유사한 방식으로 처리되기를 원할때 사용.
트리구조로 객체들을 엮는다. UML 다이어그램 OS의 파일시스템에는 폴더와 파일 두가지 유형의 개체가 있는데, 폴더와 파일은 동일하게 취급받는 경우가 있다.
Mapping          Component interface component.go   Composite folder.go   Leaf file.go   client main.go    코드 component.go
package main type component interface { search(string) } folder.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Bridge 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/bridge/</link>
      <pubDate>Mon, 19 Apr 2021 22:34:13 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/bridge/</guid>
      <description>Bridge Pattern 출처: https://golangbyexample.com/bridge-design-pattern-in-go/
개요 구현부에서 추상층을 분리하여 각자 독립적으로 변형할 수 있게 하는 패턴이다.이 패턴은 큰 클래스를 두개의 개별 계층으로 나누는것을 제안한다.
 Abstraction: interface. Implementation에 대한 참조가 포함됨.
Abstraction의 자식을 Refined Abstraction 이라고 부름. Implementation: interface.
Implementation의 자식을 Concrete Implementation 이라고 부름.  UML 다이어그램 2가지 유형의 컴퓨터 Mac과 Windows가 있다고 가정. 2가지 유형의 프린터 epson과 hp가 있다고 가정. 2*2의 조합의 4개의 구조체를 만드는 대신 2개의 계층을 만든다.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Adapter 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/adapter/</link>
      <pubDate>Sun, 18 Apr 2021 23:24:18 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/adapter/</guid>
      <description>Adapter Pattern 한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환한다.어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.코드 출처: https://refactoring.guru/design-patterns/adapter/go/example 윈도우에는 USB, 맥북에는 thunderbolt 포트가 있다.윈도우 PC에 thunderbolt포트를 연결하기 위해 adapter가 필요하다client.go
package main import &amp;#34;fmt&amp;#34; type client struct { } func (c *client) insertLightningConnectorIntoComputer(com computer) { fmt.Println(&amp;#34;Client inserts Lightning connector into computer.&amp;#34;) com.insertIntoLightningPort() } computer.go
package main type computer interface { insertIntoLightningPort() } mac.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Singleton 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/singleton/</link>
      <pubDate>Sun, 18 Apr 2021 11:53:14 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/singleton/</guid>
      <description>Singleton 패턴 하나의 클래스에 대해 하나의 인스턴스만 존재하는 패턴go에서는 sync.Once를 통해 구현 가능하다.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) type User struct { uid int name string level int } type userDatabase struct { users map[int]*User } var once sync.Once var instance *userDatabase func (d *userDatabase) GetUser(uid int) (*User, bool) { user, ok := d.users[uid] return user, ok } func GetUserDatabase() *userDatabase { // sync.Once.Do()는 딱 한번만 실행  once.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Prototype 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/prototype_pattern/</link>
      <pubDate>Sat, 17 Apr 2021 21:18:19 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/prototype_pattern/</guid>
      <description>프로토타입 패턴 프로토타입 패턴(prototype pattern)은 생성할 객체들의 타입이 프로토타입인 인스턴스로부터 결정되도록 하며, 인스턴스는 새 객체를 만들기 위해 자신을 복제(clone)하게 된다.얕은 복사(shallow copy) vs 깊은 복사(deep copy) 얕은 복사 객체를 복사할때 참조값을 가진 멤버는 참조값만 복사 됨.
type Status struct { str int dex int wis int } type Monster struct { Name string Status *Status } func main() { slime := Monster{ &amp;#34;slime&amp;#34;, &amp;amp;Status{1,1,1}, } goblin := slime goblin.Name = &amp;#34;goblin&amp;#34; goblin.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Factory 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/factory/</link>
      <pubDate>Fri, 16 Apr 2021 17:50:07 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/factory/</guid>
      <description>Factory Pattern 1. factory method pattern 객체를 생성하기 위한 인터페이스를 정의하는데, 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정한다.
package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; ) type Character interface { Attack() } const ( warrior = iota mage ) type Warrior struct { } func (w *Warrior) Attack() { fmt.Println(&amp;#34;sword attack&amp;#34;) } type Mage struct { } func (m *Mage) Attack() { fmt.Println(&amp;#34;magic attack&amp;#34;) }  Factory struct  type CharacterFactory struct { } func (f *CharacterFactory) Create(job int) (Character, error) { switch job { case warrior: return &amp;amp;Warrior{}, nil case mage: return &amp;amp;Mage{}, nil default: return nil, errors.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Builder 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/bulilder/</link>
      <pubDate>Fri, 16 Apr 2021 12:08:15 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/bulilder/</guid>
      <description>1. Builder Pattern Person 객체를 예로 들어보자
type Person struct { name string age int job string height float32 weight float32 } func NewPerson(name string, age int, job string, height float32, weight float32) *Person { return &amp;amp;Person{ name, age, job, height, weight, } } func main() { p := NewPerson(&amp;#34;홍길동&amp;#34;, 22, &amp;#34;developer&amp;#34;, 177.2, 72.9) } 위처럼 모든 정보를 입력하지 않아도 될때도 있고, 가독성도 좋지않으며 parameter의 순서도 맞춰주어야한다.또 객체에 새로운 정보가 추가된다면 NewPerson()을 계속 수정해주어야 한다.</description>
    </item>
    
    <item>
      <title>[Go언어] VSCode에서 gopls 에러가 날때</title>
      <link>https://icecat471.github.io/devlog/post/golang/gopls_error/</link>
      <pubDate>Fri, 16 Apr 2021 10:12:06 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/gopls_error/</guid>
      <description>vscode에서 아래와 같은 에러 발생시
 gopls requires a module at the root of your workspace. You can work with multiple modules by opening each one as a workspace folder.
 settings.json 파일에 아래와 같이 추가하고 vscode를 재실행한다.
&amp;#34;gopls&amp;#34;: { &amp;#34;experimentalWorkspaceModule&amp;#34;: true, }, </description>
    </item>
    
    <item>
      <title>Hugo syntax highlight 변경</title>
      <link>https://icecat471.github.io/devlog/post/hugo/syntax_highlight/</link>
      <pubDate>Fri, 16 Apr 2021 03:11:45 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/hugo/syntax_highlight/</guid>
      <description>1. 원하는 테마 찾기 highlightjs.org에서 원하는 테마를 찾는다.2. css 찾기 highlightjs github에서 원하는 테마의 css파일 내용을 복사한다.3. 테마 변경 config.yml에 아래의 내용을 추가한다.pygmentsUseClasses:true(Hugo PaperMod 테마 기준)/themes/PaperMod/assests/css/hljs/an-old-hope.min.css 의 내용을 복사한 내용으로 바꾼다.=&amp;gt; 임시적으로 설정한것으로 theme overriding으로 변경 가능한지 찾아봐야 함.</description>
    </item>
    
    <item>
      <title>Hugo 블로그 댓글 기능 추가하기</title>
      <link>https://icecat471.github.io/devlog/post/hugo/comment/</link>
      <pubDate>Fri, 16 Apr 2021 02:00:08 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/hugo/comment/</guid>
      <description>1. 세팅하기 이곳을 클릭 하여 utterances 사이트로 이동한다.configuration 부분을 따라 utterances app을 설치하고 repository설정을 한다.그 외 Blog Post &amp;lt;=&amp;gt; Issue Mapping, Theme 설정등을 한다.설정을 끝내면 Enalble Utterances 부분에 코드가 생성된다
&amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34; repo=&amp;#34;(account)/(repo)&amp;#34; issue-term=&amp;#34;pathname&amp;#34; theme=&amp;#34;github-dark&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; 2. hugo에 적용하기 테마마다 설정 방법이 다른데 내가 사용중인 PaperMod 기준 설정방법이다.ParperMod 깃허브 에서도 확인 가능하다./layouts/partials/comments.html 파일을 만들고 위에서 생성된 코드를 붙여넣기한다.그 후 config.yml 파일에 아래부분을 추가해준다.</description>
    </item>
    
    <item>
      <title>gRPC란?</title>
      <link>https://icecat471.github.io/devlog/post/network/grpc/</link>
      <pubDate>Thu, 15 Apr 2021 22:50:49 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/network/grpc/</guid>
      <description>gRPC란? 구글에서 개발한 RPC 시스템. 기본 개념은 RPC와 동일하지만 HTTP/2 기반으로 양방향 스트리밍 지원.HTTP/2를 사용함으로써 메세지의 압축률과 성능이 좋음.HTTP와 비교    Feature gRPC HTTP APIs with JSON     Contract Required (.proto) Optional (OpenAPI)   Protocol HTTP/2 HTTP   Payload Protobuf (small, binary) JSON (large, human readable)   Prescriptiveness Strict specification Loose. Any HTTP is valid.   Streaming Client, server, bi-directional Client, server   Browser support No (requires grpc-web) Yes   Security Transport (TLS) Transport (TLS)   Clientcode-generation Yes OpenAPI + third-party tooling         gRPC의 장점 1.</description>
    </item>
    
    <item>
      <title>Go언어 log.SetPrefix()</title>
      <link>https://icecat471.github.io/devlog/post/golang/set_prefix_on_log/</link>
      <pubDate>Thu, 15 Apr 2021 15:04:43 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/set_prefix_on_log/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; ) func init() { log.SetPrefix(&amp;#34;Blockchain: &amp;#34;) } func main() { fmt.Println(&amp;#34;test&amp;#34;) log.Println(&amp;#34;test&amp;#34;) } 실행시켜보면
test Blockchain: 2021/04/15 15:04:03 test </description>
    </item>
    
    <item>
      <title>html 캔버스에 이미지 그리기</title>
      <link>https://icecat471.github.io/devlog/post/html/draw_image_on_canvas/</link>
      <pubDate>Wed, 14 Apr 2021 22:40:37 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/html/draw_image_on_canvas/</guid>
      <description>&amp;lt;canvas id=&amp;#34;myCanvas&amp;#34; width=&amp;#34;500&amp;#34; height=&amp;#34;800&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; let canvas = document.querySelector(&amp;#39;#myCanvas&amp;#39;); let context = canvas.getContext(&amp;#39;2d&amp;#39;); // 이미지 로딩 let dragon = new Image(); dragon.src = &amp;#39;이미지 경로&amp;#39;; context.drawImage(dragon, x좌표, y좌표, width, height); setInterval()을 사용해서 특정시간마다 화면을 새로 그릴 수 있다.
// 1초마다 새로 그림 setInterval(()=&amp;gt; { context.drawImage(dragon, x좌표, y좌표, width, height); }, 1000); // 1000ms </description>
    </item>
    
    <item>
      <title>Go언어 defer와 panic</title>
      <link>https://icecat471.github.io/devlog/post/golang/defer_and_panic/</link>
      <pubDate>Tue, 13 Apr 2021 22:13:26 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/defer_and_panic/</guid>
      <description>출처: 예제로 배우는 Go 프로그래밍
1. defer 특정 문장 혹은 함수를 defer를 호출하는 함수가 return하기 직전에 실행하게 한다.
package main import &amp;#34;os&amp;#34; func main() { f, err := os.Open(&amp;#34;1.txt&amp;#34;) if err != nil { panic(err) } // main 마지막에 파일 close 실행  defer f.Close() // 파일 읽기  bytes := make([]byte, 1024) f.Read(bytes) println(len(bytes)) } 2. panic 함수를 즉시 멈추고 defer를 모두 실행한 뒤 즉시 리턴.이것은 콜스택을 따라 상위함수에도 모두 적용.</description>
    </item>
    
    <item>
      <title>Go언어 flag 패키지를 통한 command-line flag 파싱</title>
      <link>https://icecat471.github.io/devlog/post/golang/flag/</link>
      <pubDate>Mon, 12 Apr 2021 23:18:41 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/flag/</guid>
      <description>golang flag package
command-line flag를 파싱해주는 패키지.
// flag값에 저장된 int64변수의 주소값 반환 maxValue := flag.Int64(&amp;#34;max&amp;#34;, 10, &amp;#34;Defines maximum value&amp;#34;) /* xxxVar() 함수는 반환값이 없고 첫번째 인자로 변수의 포인터를 넘겨주면 변수에 값을 할당해줌. */ var minValue int64 flag.Int64Var(&amp;amp;minValue, &amp;#34;min&amp;#34;, 0, &amp;#34;Defines minimum value&amp;#34;) // flag에 command-line 파싱 // 꼭 호출해주어야 함 flag.Parse() </description>
    </item>
    
    <item>
      <title>Go언어 프로젝트 외부의 모듈 import하기</title>
      <link>https://icecat471.github.io/devlog/post/golang/external_module/</link>
      <pubDate>Mon, 12 Apr 2021 22:14:23 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/external_module/</guid>
      <description>go.mod 파일에서
require ( &amp;lt;모듈명&amp;gt; v0.0.0 ) replace &amp;lt;모듈명&amp;gt; v0.0.0 =&amp;gt; ../module // 이런 형태로 경로를 지정해줌 </description>
    </item>
    
    <item>
      <title>브라우저에서 유니티 함수 호출하기</title>
      <link>https://icecat471.github.io/devlog/post/unity/call_unity_func_in_js/</link>
      <pubDate>Mon, 12 Apr 2021 12:36:10 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/unity/call_unity_func_in_js/</guid>
      <description>참고: Unity Document WebGL
build시 생성되는 unityInstance에 메세지를 보내서 호출.
unityInstace.SendMessage(&amp;#39;오브젝트명&amp;#39;, &amp;#39;함수명&amp;#39;); </description>
    </item>
    
    <item>
      <title>유니티 WebGL 자바스크립트 함수 호출</title>
      <link>https://icecat471.github.io/devlog/post/unity/call_javascript/</link>
      <pubDate>Mon, 12 Apr 2021 11:28:39 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/unity/call_javascript/</guid>
      <description>참고: Unity Document WebGL
Assets/Plugins 폴더를 만들고 Plugin.jslib 파일을 만든다
// Plugin.jslib  mergeInto(LibraryManager.library, { Hello: function () { window.alert(&amp;#34;Hello, world!&amp;#34;); }, HelloString: function (str) { window.alert(Pointer_stringify(str)); }, PrintFloatArray: function (array, size) { for(var i = 0; i &amp;lt; size; i++) console.log(HEAPF32[(array &amp;gt;&amp;gt; 2) + i]); }, AddNumbers: function (x, y) { return x + y; }, StringReturnValueFunction: function () { var returnStr = &amp;#34;bla&amp;#34;; var bufferSize = lengthBytesUTF8(returnStr) + 1; var buffer = _malloc(bufferSize); stringToUTF8(returnStr, buffer, bufferSize); return buffer; }, BindWebGLTexture: function (texture) { GLctx.</description>
    </item>
    
    <item>
      <title>터미널에서 command not found: dotnet 에러</title>
      <link>https://icecat471.github.io/devlog/post/unity/command_not_found_dotnet/</link>
      <pubDate>Mon, 12 Apr 2021 09:23:08 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/unity/command_not_found_dotnet/</guid>
      <description>아래처럼 나올 때
zsh: command not found: dotnet dotnet package를 설치했다면/usr/local/share/dotnet 경로에 설치되어 있는 것을 확인./usr/local/bin 경로에 링크를 만들어주면 된다.ln -s /usr/local/share/dotnet/dotnet /usr/local/bin 출처: stackoverflow</description>
    </item>
    
    <item>
      <title>유니티 webGL 프로젝트 로컬서버에서 실행하기</title>
      <link>https://icecat471.github.io/devlog/post/unity/local_server/</link>
      <pubDate>Sun, 11 Apr 2021 18:33:11 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/unity/local_server/</guid>
      <description>webGL &amp;ldquo;build and run&amp;rdquo; 버튼을 눌러서 실행하면 빌드가 다시 되기때문에 시간이 오래걸림로컬에서 서버를 열어서 실행해볼 수 있다.
http-server 설치 $ npm i -g http-server 실행 // 유니티 빌드 폴더로 이동 $ http-server Starting up http-server, serving ./ Available on: http://127.0.0.1:8080 http://120.50.93.152:8080 http://192.168.2.1:8080 Hit CTRL-C to stop the server http://localhost:8080 로 접속해보면 게임이 실행된것을 확인해 볼 수 있다.</description>
    </item>
    
    <item>
      <title>Docker 컨테이너 메모리 및 CPU 제한하기</title>
      <link>https://icecat471.github.io/devlog/post/docker/docker_memory_limit/</link>
      <pubDate>Sun, 11 Apr 2021 16:35:36 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/docker/docker_memory_limit/</guid>
      <description>// 512MB의 메모리와 50%의 CPU 할당 docker run -m 512m --cpu-quota=50000 &amp;lt;image name&amp;gt; // stat 확인 docker stats &amp;lt;container id&amp;gt; </description>
    </item>
    
    <item>
      <title>Hugo로 블로그 시작하기</title>
      <link>https://icecat471.github.io/devlog/post/hugo/start_hugo/</link>
      <pubDate>Sun, 11 Apr 2021 12:11:05 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/hugo/start_hugo/</guid>
      <description>출처: IALY&amp;rsquo;s BLOG
1. Hugo 설치  MacOS  // 설치 $ brew install hugo // 설치 확인 $ hugo version hugo v0.82.0+extended darwin/amd64 BuildDate=unknown 2. Hugo Project 생성 hugo new site &amp;lt;프로젝트명&amp;gt; 3. Hugo 테마 다운로드 휴고 테마 사이트 위 사이트에서 원하는 테마를 확인 가능.
원하는 테마를 찾으면 프로젝트의 /themes 폴더에서 아래 명령어로 다운
$ git clone &amp;lt;테마 깃허브 주소&amp;gt; 그 후 config.toml 파일 수정 (여기서는 config.yml 파일로 변경하였다.)config 파일 예시는 각 테마 깃허브에서 확인 가능.</description>
    </item>
    
    
    
  </channel>
</rss>
