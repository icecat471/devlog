<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design pattern on icecat471&#39;s Devlog</title>
    <link>https://icecat471.github.io/devlog/tags/design-pattern/</link>
    <description>Recent content in design pattern on icecat471&#39;s Devlog</description>
    <image>
      <url>https://icecat471.github.io/devlog/papermod-cover.png</url>
      <link>https://icecat471.github.io/devlog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Apr 2021 22:34:13 +0900</lastBuildDate><atom:link href="https://icecat471.github.io/devlog/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[디자인패턴] Bridge 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/bridge/</link>
      <pubDate>Mon, 19 Apr 2021 22:34:13 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/bridge/</guid>
      <description>Bridge Pattern 출처: https://golangbyexample.com/bridge-design-pattern-in-go/
개요 구현부에서 추상층을 분리하여 각자 독립적으로 변형할 수 있게 하는 패턴이다.이 패턴은 큰 클래스를 두개의 개별 계층으로 나누는것을 제안한다.
 Abstraction: interface. Implementation에 대한 참조가 포함됨.
Abstraction의 자식을 Refined Abstraction 이라고 부름. Implementation: interface.
Implementation의 자식을 Concrete Implementation 이라고 부름.  UML 다이어그램 2가지 유형의 컴퓨터 Mac과 Windows가 있다고 가정. 2가지 유형의 프린터 epson과 hp가 있다고 가정. 2*2의 조합의 4개의 구조체를 만드는 대신 2개의 계층을 만든다.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Adapter 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/adapter/</link>
      <pubDate>Sun, 18 Apr 2021 23:24:18 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/adapter/</guid>
      <description>Adapter Pattern 한 클래스의 인터페이스를 클라이언트에서 사용하고자하는 다른 인터페이스로 변환한다.어댑터를 이용하면 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스들을 연결해서 쓸 수 있다.코드 출처: https://refactoring.guru/design-patterns/adapter/go/example 윈도우에는 USB, 맥북에는 thunderbolt 포트가 있다.윈도우 PC에 thunderbolt포트를 연결하기 위해 adapter가 필요하다client.go
package main import &amp;#34;fmt&amp;#34; type client struct { } func (c *client) insertLightningConnectorIntoComputer(com computer) { fmt.Println(&amp;#34;Client inserts Lightning connector into computer.&amp;#34;) com.insertIntoLightningPort() } computer.go
package main type computer interface { insertIntoLightningPort() } mac.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Singleton 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/singleton/</link>
      <pubDate>Sun, 18 Apr 2021 11:53:14 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/singleton/</guid>
      <description>Singleton 패턴 하나의 클래스에 대해 하나의 인스턴스만 존재하는 패턴go에서는 sync.Once를 통해 구현 가능하다.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) type User struct { uid int name string level int } type userDatabase struct { users map[int]*User } var once sync.Once var instance *userDatabase func (d *userDatabase) GetUser(uid int) (*User, bool) { user, ok := d.users[uid] return user, ok } func GetUserDatabase() *userDatabase { // sync.Once.Do()는 딱 한번만 실행  once.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Prototype 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/prototype_pattern/</link>
      <pubDate>Sat, 17 Apr 2021 21:18:19 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/prototype_pattern/</guid>
      <description>프로토타입 패턴 프로토타입 패턴(prototype pattern)은 생성할 객체들의 타입이 프로토타입인 인스턴스로부터 결정되도록 하며, 인스턴스는 새 객체를 만들기 위해 자신을 복제(clone)하게 된다.얕은 복사(shallow copy) vs 깊은 복사(deep copy) 얕은 복사 객체를 복사할때 참조값을 가진 멤버는 참조값만 복사 됨.
type Status struct { str int dex int wis int } type Monster struct { Name string Status *Status } func main() { slime := Monster{ &amp;#34;slime&amp;#34;, &amp;amp;Status{1,1,1}, } goblin := slime goblin.Name = &amp;#34;goblin&amp;#34; goblin.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Factory 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/factory/</link>
      <pubDate>Fri, 16 Apr 2021 17:50:07 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/factory/</guid>
      <description>Factory Pattern 1. factory method pattern 객체를 생성하기 위한 인터페이스를 정의하는데, 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정한다.
package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; ) type Character interface { Attack() } const ( warrior = iota mage ) type Warrior struct { } func (w *Warrior) Attack() { fmt.Println(&amp;#34;sword attack&amp;#34;) } type Mage struct { } func (m *Mage) Attack() { fmt.Println(&amp;#34;magic attack&amp;#34;) }  Factory struct  type CharacterFactory struct { } func (f *CharacterFactory) Create(job int) (Character, error) { switch job { case warrior: return &amp;amp;Warrior{}, nil case mage: return &amp;amp;Mage{}, nil default: return nil, errors.</description>
    </item>
    
    <item>
      <title>[디자인패턴] Builder 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/bulilder/</link>
      <pubDate>Fri, 16 Apr 2021 12:08:15 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/bulilder/</guid>
      <description>1. Builder Pattern Person 객체를 예로 들어보자
type Person struct { name string age int job string height float32 weight float32 } func NewPerson(name string, age int, job string, height float32, weight float32) *Person { return &amp;amp;Person{ name, age, job, height, weight, } } func main() { p := NewPerson(&amp;#34;홍길동&amp;#34;, 22, &amp;#34;developer&amp;#34;, 177.2, 72.9) } 위처럼 모든 정보를 입력하지 않아도 될때도 있고, 가독성도 좋지않으며 parameter의 순서도 맞춰주어야한다.또 객체에 새로운 정보가 추가된다면 NewPerson()을 계속 수정해주어야 한다.</description>
    </item>
    
  </channel>
</rss>
