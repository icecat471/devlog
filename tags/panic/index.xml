<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>panic on icecat471&#39;s Devlog</title>
    <link>https://icecat471.github.io/devlog/tags/panic/</link>
    <description>Recent content in panic on icecat471&#39;s Devlog</description>
    <image>
      <url>https://icecat471.github.io/devlog/papermod-cover.png</url>
      <link>https://icecat471.github.io/devlog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 13 Apr 2021 22:13:26 +0900</lastBuildDate><atom:link href="https://icecat471.github.io/devlog/tags/panic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go언어 defer와 panic</title>
      <link>https://icecat471.github.io/devlog/post/golang/defer_and_panic/</link>
      <pubDate>Tue, 13 Apr 2021 22:13:26 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/defer_and_panic/</guid>
      <description>출처: 예제로 배우는 Go 프로그래밍
1. defer 특정 문장 혹은 함수를 defer를 호출하는 함수가 return하기 직전에 실행하게 한다.
package main import &amp;#34;os&amp;#34; func main() { f, err := os.Open(&amp;#34;1.txt&amp;#34;) if err != nil { panic(err) } // main 마지막에 파일 close 실행  defer f.Close() // 파일 읽기  bytes := make([]byte, 1024) f.Read(bytes) println(len(bytes)) } 2. panic 함수를 즉시 멈추고 defer를 모두 실행한 뒤 즉시 리턴.이것은 콜스택을 따라 상위함수에도 모두 적용.</description>
    </item>
    
  </channel>
</rss>
