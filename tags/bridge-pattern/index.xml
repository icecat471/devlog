<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bridge pattern on icecat471&#39;s Devlog</title>
    <link>https://icecat471.github.io/devlog/tags/bridge-pattern/</link>
    <description>Recent content in bridge pattern on icecat471&#39;s Devlog</description>
    <image>
      <url>https://icecat471.github.io/devlog/papermod-cover.png</url>
      <link>https://icecat471.github.io/devlog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Apr 2021 22:34:13 +0900</lastBuildDate><atom:link href="https://icecat471.github.io/devlog/tags/bridge-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[디자인패턴] Bridge 패턴</title>
      <link>https://icecat471.github.io/devlog/post/design_pattern/bridge/</link>
      <pubDate>Mon, 19 Apr 2021 22:34:13 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/design_pattern/bridge/</guid>
      <description>Bridge Pattern 출처: https://golangbyexample.com/bridge-design-pattern-in-go/
개요 구현부에서 추상층을 분리하여 각자 독립적으로 변형할 수 있게 하는 패턴이다.이 패턴은 큰 클래스를 두개의 개별 계층으로 나누는것을 제안한다.
 Abstraction: interface. Implementation에 대한 참조가 포함됨.
Abstraction의 자식을 Refined Abstraction 이라고 부름. Implementation: interface.
Implementation의 자식을 Concrete Implementation 이라고 부름.  UML 다이어그램 2가지 유형의 컴퓨터 Mac과 Windows가 있다고 가정. 2가지 유형의 프린터 epson과 hp가 있다고 가정. 2*2의 조합의 4개의 구조체를 만드는 대신 2개의 계층을 만든다.</description>
    </item>
    
  </channel>
</rss>
