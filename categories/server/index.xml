<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>server on icecat471&#39;s Devlog</title>
    <link>https://icecat471.github.io/devlog/categories/server/</link>
    <description>Recent content in server on icecat471&#39;s Devlog</description>
    <image>
      <url>https://icecat471.github.io/devlog/papermod-cover.png</url>
      <link>https://icecat471.github.io/devlog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 28 Oct 2021 11:09:17 +0900</lastBuildDate><atom:link href="https://icecat471.github.io/devlog/categories/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go언어에서의 DDD</title>
      <link>https://icecat471.github.io/devlog/post/server/ddd_in_go/</link>
      <pubDate>Thu, 28 Oct 2021 11:09:17 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/server/ddd_in_go/</guid>
      <description>Reference https://dev.to/stevensunflash/using-domain-driven-design-ddd-in-golang-3ee5 https://github.com/victorsteven/food-app-server
DDD(Domain Driven Design) DDD의 4Layers   Domain : domain이 위치하고, 애플리케이션의 비즈니스로직이 정의된 곳
  Infrastructure : 애플리케이션과 독립적인 모든 것이 존재하는 곳(외부 라이브러리, 데이터베이스 엔진 등)
  Application : domain과 interface 사이의 통로. interface layer에서 domain layer로 요청을 보내고 응답을 반환
  Interface : 웹 서비스, RIM 인터페이스 웹 애플리케이션, 배치 프로세스 등 다른 시스템과 상호작용 하는 모든 것이 위치
  시작 이 프로젝트는 구조는 아래와 같다.</description>
    </item>
    
  </channel>
</rss>
