<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on icecat471&#39;s Devlog</title>
    <link>https://icecat471.github.io/devlog/categories/golang/</link>
    <description>Recent content in golang on icecat471&#39;s Devlog</description>
    <image>
      <url>https://icecat471.github.io/devlog/papermod-cover.png</url>
      <link>https://icecat471.github.io/devlog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Jun 2021 01:54:19 +0900</lastBuildDate><atom:link href="https://icecat471.github.io/devlog/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Go언어] gorilla websocket request origin 에러</title>
      <link>https://icecat471.github.io/devlog/post/golang/websocket_error/</link>
      <pubDate>Wed, 02 Jun 2021 01:54:19 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/websocket_error/</guid>
      <description>websocket: request origin not allowed by Upgrader.CheckOrigin 위 에러 발생시
upgrader.CheckOrigin = func(r *http.Request) bool { return true } 위 코드를 추가해준다.
필요에 따라 origin check 로직을 추가해주면 된다.</description>
    </item>
    
    <item>
      <title>[Go언어] Closure</title>
      <link>https://icecat471.github.io/devlog/post/golang/closure/</link>
      <pubDate>Tue, 25 May 2021 18:42:01 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/closure/</guid>
      <description>클로저(closure) 함수를 일급객체로 취급하는 함수형 프로그래밍 언어(Erlang, Scala, Haskell 등)에서 사용되는 중요한 특성이다.클로저에 대해 MDN은 아래와 같이 정의하고 있다.
 “A closure is the combination of a function and the lexical environment within which that function was declared.”
&amp;ldquo;클로저는 함수와 그 함수가 선언된 렉시컬 환경의 조합이다.&amp;rdquo;
 아래의 예제를 먼저 확인해 보자
package main func outerFunc() func() { x := 10 innerFunc := func() { fmt.Println(x) } return innerFunc } func main() { f := outerFunc() f() // output:  // 10 } scope는 함수를 호출할 때가 아니라 어디에 선언하였는지에 따라 결정된다.</description>
    </item>
    
    <item>
      <title>[Go언어] 슬라이스에서 요소 삭제</title>
      <link>https://icecat471.github.io/devlog/post/golang/delete_item_from_slice/</link>
      <pubDate>Sat, 22 May 2021 13:27:50 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/delete_item_from_slice/</guid>
      <description>순서가 중요한 경우 package main import &amp;#34;fmt&amp;#34; func remove(slice []int, s int) []int { return append(slice[:s], slice[s+1:]...) } func main() { var Slice1 = []int{1, 2, 3, 4, 5} fmt.Printf(&amp;#34;slice1: %v\n&amp;#34;, Slice1) Slice2 := remove(Slice1, 2) fmt.Printf(&amp;#34;slice2: %v\n&amp;#34;, Slice2) } 실행 결과
slice1: [1 2 3 4 5] slice2: [1 2 4 5] 순서가 중요하지 않은 경우 package main import &amp;#34;fmt&amp;#34; func remove(s []int, i int) []int { s[i] = s[len(s)-1] return s[:len(s)-1] } func main() { var Slice1 = []int{1, 2, 3, 4, 5} fmt.</description>
    </item>
    
    <item>
      <title>[Go언어] VSCode에서 gopls 에러가 날때</title>
      <link>https://icecat471.github.io/devlog/post/golang/gopls_error/</link>
      <pubDate>Fri, 16 Apr 2021 10:12:06 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/gopls_error/</guid>
      <description>vscode에서 아래와 같은 에러 발생시
 gopls requires a module at the root of your workspace. You can work with multiple modules by opening each one as a workspace folder.
 settings.json 파일에 아래와 같이 추가하고 vscode를 재실행한다.
&amp;#34;gopls&amp;#34;: { &amp;#34;experimentalWorkspaceModule&amp;#34;: true, }, </description>
    </item>
    
    <item>
      <title>Go언어 log.SetPrefix()</title>
      <link>https://icecat471.github.io/devlog/post/golang/set_prefix_on_log/</link>
      <pubDate>Thu, 15 Apr 2021 15:04:43 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/set_prefix_on_log/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; ) func init() { log.SetPrefix(&amp;#34;Blockchain: &amp;#34;) } func main() { fmt.Println(&amp;#34;test&amp;#34;) log.Println(&amp;#34;test&amp;#34;) } 실행시켜보면
test Blockchain: 2021/04/15 15:04:03 test </description>
    </item>
    
    <item>
      <title>Go언어 defer와 panic</title>
      <link>https://icecat471.github.io/devlog/post/golang/defer_and_panic/</link>
      <pubDate>Tue, 13 Apr 2021 22:13:26 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/defer_and_panic/</guid>
      <description>출처: 예제로 배우는 Go 프로그래밍
1. defer 특정 문장 혹은 함수를 defer를 호출하는 함수가 return하기 직전에 실행하게 한다.
package main import &amp;#34;os&amp;#34; func main() { f, err := os.Open(&amp;#34;1.txt&amp;#34;) if err != nil { panic(err) } // main 마지막에 파일 close 실행  defer f.Close() // 파일 읽기  bytes := make([]byte, 1024) f.Read(bytes) println(len(bytes)) } 2. panic 함수를 즉시 멈추고 defer를 모두 실행한 뒤 즉시 리턴.이것은 콜스택을 따라 상위함수에도 모두 적용.</description>
    </item>
    
    <item>
      <title>Go언어 flag 패키지를 통한 command-line flag 파싱</title>
      <link>https://icecat471.github.io/devlog/post/golang/flag/</link>
      <pubDate>Mon, 12 Apr 2021 23:18:41 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/flag/</guid>
      <description>golang flag package
command-line flag를 파싱해주는 패키지.
// flag값에 저장된 int64변수의 주소값 반환 maxValue := flag.Int64(&amp;#34;max&amp;#34;, 10, &amp;#34;Defines maximum value&amp;#34;) /* xxxVar() 함수는 반환값이 없고 첫번째 인자로 변수의 포인터를 넘겨주면 변수에 값을 할당해줌. */ var minValue int64 flag.Int64Var(&amp;amp;minValue, &amp;#34;min&amp;#34;, 0, &amp;#34;Defines minimum value&amp;#34;) // flag에 command-line 파싱 // 꼭 호출해주어야 함 flag.Parse() </description>
    </item>
    
    <item>
      <title>Go언어 프로젝트 외부의 모듈 import하기</title>
      <link>https://icecat471.github.io/devlog/post/golang/external_module/</link>
      <pubDate>Mon, 12 Apr 2021 22:14:23 +0900</pubDate>
      
      <guid>https://icecat471.github.io/devlog/post/golang/external_module/</guid>
      <description>go.mod 파일에서
require ( &amp;lt;모듈명&amp;gt; v0.0.0 ) replace &amp;lt;모듈명&amp;gt; v0.0.0 =&amp;gt; ../module // 이런 형태로 경로를 지정해줌 </description>
    </item>
    
  </channel>
</rss>
